#MATPLOT-LIB

import matplotlib.pyplot as plt
#add matplotlib inline to show the graphs on jupyter notebook
%matplotlib inline


#scatter plot
plt.scatter(x, y, label= "stars", color= "m", marker= "*", s=100)                    #s = size of marker   # Highlighting points as a scatter plot                                                                      #will highlight the actual points on the graph

plt.plot(x, y, 'r') # 'r' is the color red                                         #we always need x and y coordinates to plot ...plt.plot joins the points with a line
plt.xlabel('X Axis Title Here')
plt.ylabel('Y Axis Title Here')
plt.title('String Title Here')

plt.grid()                                                                           #makes grid in the graph

plt.legend()                                                                         #helps distinguish the different sets of lines
plt.show()

## Creating Multiplots on Same Canvas

# plt.subplot(nrows, ncols, plot_number)
plt.subplot(1,2,1)
plt.plot(x, y, 'r--') # More on color options later
plt.subplot(1,2,2)
plt.plot(y, x, 'g*-');

## Introduction to the Object Oriented Method

The main idea in using the Object Oriented method is 1st create figure objects and then 2 add axes to the figure object and finally call methods for the axes (you can have multiple axes in a figure)

#1) Create Figure (empty canvas)
 fig = plt.figure()
 
#2) Add axes to the figure object
axes = fig.add_axes([0.1, 0.1, 0.8, 0.8]) # left, bottom, width, height (range 0 to 1)

#3) Call methods of axes like (axes1.plot, axes1.xlabel etc) #plot directly on axes
axes.plot(x, y, 'b')
axes.set_xlabel('Set X Label') # Notice the use of set_ to begin methods
axes.set_ylabel('Set y Label')
axes.set_title('Set Title')    #1st canvas space...then axes then plot in those set of segments of axes

## subplots()

The plt.subplots() object will act as a more automatic axis manager.

# Use similar to plt.figure() except use tuple unpacking to grab fig and axes
fig, axes = plt.subplots()

# Now use the axes object to add stuff to plot
axes.plot(x, y, 'r')
axes.plot(y, x, 'b')
axes.set_xlabel('x')
axes.set_ylabel('y')
axes.set_title('title');

Then you can specify the number of rows and columns when creating the subplots() object:

# Empty canvas of 1 by 2 subplots
fig, axes = plt.subplots(nrows=1, ncols=2)

We can iterate through this array:

for ax in axes:
    ax.plot(x, y, 'b')
    ax.set_xlabel('x')
    ax.set_ylabel('y')
    ax.set_title('title')

#tight_plot
axes.tight_layout()

## Saving figures
fig.savefig("filename.png", dpi=200)


### Legends

You can use the **label="label text"** keyword argument when plots or other objects are added to the figure, and then using the **legend** method without arguments to add the legend to the figure: 

fig = plt.figure()
ax = fig.add_axes([0,0,1,1])
ax.plot(x, x**2, label="x**2")    #mentioning labels over here is a necessity for showing the legend
ax.plot(x, x**3, label="x**3")
ax.legend(loc=0)                    #loc=0 is the best position for legend


### Colors with the color= parameter
fig, ax = plt.subplots()

ax.plot(x, x+1, color="blue", alpha=0.5) # half-transparant
ax.plot(x, x+2, color="#8B008B")        # RGB hex code
ax.plot(x, x+3, color="#FF8C00")        # RGB hex code 

#Plotting decision boundary along with input data
utils.plotDecisionBoundary(plotData, theta, X, y)

# Plotting 2D positive and negative examples in classification problem (Andrew ng exercises)
pos=y==1
neg = y ==0
pyplot.plot(X[pos, 0], X[pos, 1], 'k*', lw=2, ms=10)
pyplot.plot(X[neg, 0], X[neg, 1], 'ko', mfc='y', ms=8, mec='k', mew=1)

#scatter plot
sns.relplot(x = "total_bill", y="tip",data = tips,color = "b",hue="smoker",style="smoker")   #style gives the plot shape

#line plot
sns.lineplot(x = "total_bill", y="tip",data = tips)      #plots the line graph


# Category data plots

sns.catplot(x = "day", y="total_bill",data = tips,jitter = True)

#Histogram
sns.displot(tips['total_bill'],kde=False,bins=30)           #single variable    #kde is basically a density plot of the variable

#better figure plot
plt.figure(figsize = (9,5),dpi=200)                          #nice bada plot aata hai

#Joint plot 
sns.jointplot(x='total_bill',y='tip',data=tips,kind='scatter')   #kind = "kde" will give the density plot

#Joint plot for all the variables #will combine all the columns pairwise 
sns.pairplot(tips)

#Barplot
import numpy as np
sns.barplot(x='sex',y='total_bill',data=tips,estimator=np.sum)

#Count plot
sns.countplot(x='sex',data=tips)

#Box Plot
sns.boxplot(x="day", y="total_bill", hue="smoker",data=tips, palette="coolwarm")
sns.despine()                                                                           #will remove ticks # visual effect 
                                                                                        #box plot can be used for bivariate analysis specifically with a categorical and continous distribution


#Violin Plot
sns.violinplot(x="day", y="total_bill", data=tips,hue='sex',split=True,palette='Set1')


#Heat map 
sns.heatmap(data = tips.corr(),cmap='coolwarm',annot=True)        #annot gives values    #ONE NECESSITY the data must be a matrix (can be created by pivot_table)
pvflights = flights.pivot_table(values='passengers',index='month',columns='year')
sns.heatmap(pvflights)

#cluster map
sns.clustermap(pvflights,cmap='coolwarm',standard_scale=1)


#Multi grid graphs (histogram etc)
g = sns.FacetGrid(tips, col="time",  row="smoker")                             #will create space for the grids
g = g.map(plt.hist, "total_bill")                                              #plt.hist (is histogram) we could use other graphs as well like box plot , count plot etc








