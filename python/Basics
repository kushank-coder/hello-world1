isinstance(var,int)   #this will check and will return true or false based on the instance type

___
# Python Crash Course

Please note, this is not meant to be a comprehensive overview of Python or programming in general, if you have no programming experience, you should probably take my other course: [Complete Python Bootcamp](https://www.udemy.com/complete-python-bootcamp/?couponCode=PY20) instead.

This notebook will just go through the basic topics in order:

* Data types
    * Numbers
    * Strings
    * Printing
    * Lists    
    * Dictionaries     (These are basically just the key value pairs remember only thing that dictionary does is it changes the index for accessing items you need to use Keys)
    * Booleans
    * Tuples 
    * Sets           #sets have no order so they cant be accessed by the slicing notation
     # there are other data types like arrays, series ,dataframes (majorly these objects are a derivation from other libraries like numpy , pandas)
 
* Comparison Operators
* if, elif, else Statements
* for Loops
* while Loops
* range()                                    #range takes range(start,stop,step)   ie range starts from start ends before stop and moves iterably              
* list comprehension
* functions
* lambda expressions
* map and filter
* methods
____

## Data types

### Numbers

1 + 1

1 * 3

1 / 2

2 ** 4

4 % 2

5 % 2

(2 + 3) * (5 + 5)

2//4               #this gives 0 as // gives the quotient

### Variable Assignment

# Can not start with number or special characters
name_of_var = 2

x = 2
y = 3

z = x + y

z

### Strings

'single quotes'

"double quotes"

" wrap lot's of other quotes"

### Printing

x = 'hello'

x

print(x)

num = 12
name = 'Sam'

print('My number is: {one}, and my name is: {two}'.format(one=num,two=name))

print('My number is: {}, and my name is: {}'.format(num,name))

### Lists

[1,2,3]

['hi',1,[1,2]]                                                   #Note: this is an example of nested lists (Note: my_list[2][1] = 1 but this type of syntax is completely different in data frames

my_list = ['a','b','c']                                          #Note: In dataframes dataframe[1][2] is basically the 2nd column and 3nd row (because indices in python start from 0)

#Adding elements to list
      1) my_list.append('d')                                     #adds the element at the end
      2) my_list.insert(2,"Kushank")                              #final list will have Kushank in the 2nd position (ie 3rd entry)
      3) my_list.extend(list2)                                    #will take union of the 2 lists


my_list                                                          # Note : we can use len function which counts the no. of elements in a list, tuple , set etc

nest = [1,2,3,[4,5,['target']]]

nest[3]

nest[3][2]

nest[3][2][0]

### Dictionaries                   

d = {'key1':'item1','key2':'item2'}

d

d['key1']

d.keys()    # gives the list of keys of the dictionary
d.values()  # gives values in the dictionary
d.items()   # it gives the key value pairs 

### Booleans

True

False

### Tuples 

t = (1,2,3)

t[0]

t[0] = 'NEW'                                                          #NOTE : this will give an error (tuples are immutable)

### Sets                                                              # Sets give unique elements ...any list, tuple and maybe np array also can be converted into a set (which will have unique values)
                                                                      # Just use set(tuple) or set(list) etc.
{1,2,3}

{1,2,3,1,2,1,2,3,3,3,3,2,2,2,1,1,2}                               

## Comparison Operators

1 > 2

1 < 2

1 >= 1

1 <= 4

1 == 1

'hi' == 'bye'

## Logic Operators

(1 > 2) and (2 < 3)

(1 > 2) or (2 < 3)

(1 == 2) or (2 == 3) or (4 == 4)

## if,elif, else Statements

if 1 == 2:
    print('first')
elif 3 == 3:
    print('middle')
else:
    print('Last')

## for Loops

seq = [1,2,3,4,5]

for item in seq:
    print(item)
    
## while Loops

i = 1
while i < 5:
    print('i is: {}'.format(i))
    i = i+1
    
#NOTE : We never ever use brackets in defining function or while ,for and if loops
## range()

range(5)

for i in range(5):
    print(i)

list(range(5))

## list comprehension

x = [1,2,3,4]

out = []
for item in x:
    out.append(item**2)
print(out)

[item**2 for item in x]

## functions
#Multi lines comments
def my_func(param1='default'):
    """
    Docstring goes here.
    """
    print(param1)

my_func

my_func()

my_func('new param')

my_func(param1='new param')

def square(x):
    return x**2

out = square(2)

print(out)

## lambda expressions

def times2(var):
    return var*2

times2(2)
#NOTE: lambda function omits "def" the function name ie "times2" here and the return clause.. lambda expression is just a form of representing a quick function
lambda var: var*2

## map and filter

seq = [1,2,3,4,5]
#NOTE : Map function takes a list and a function in its arguments and returns the output as per the function.

map(times2,seq)

list(map(times2,seq))

list(map(lambda var: var*2,seq))

filter(lambda item: item%2 == 0,seq)

list(filter(lambda item: item%2 == 0,seq))

## methods

st = 'hello my name is Sam'

st.lower()

st.upper()

st.split()

tweet = 'Go Sports! #Sports'

tweet.split('#')

tweet.split('#')[1]

d

d.keys()

d.items()

lst = [1,2,3]

lst.pop()

lst

'x' in [1,2,3]

'x' in ['x','y','z']

# Great Job!


#TUPLE UNPACKING                                         //without changing the data extracting out values from a tuple
list = [(1,2),(3,4)]
for (a,b) in list
   print a
 # 1 3   
   
#For assigning null
d= np.nan


#Decorators (not very clear)

Decorators can be used to improve the functionality of our existing function. Majorly used to calculate the time it takes to run the function 
decorator improves the functionality of an existing function.


      def decorator(function):
         print ("inside decorator")
         function()
 
      @decorator
      def print_value():
         print ("check")


# def __init__(self):    # this function is automatically called whenever we make an object of the class these functions get run without even calling them
                          # it is used to define the attributes of the class
