# NumPy 
Numpy library majorly creates array of any dimension which has "same" type of each element. either all are string or all are no.s....Numpy is famous for its calculations so generally we use number in a numpy

import numpy as np

Numpy has many built-in functions and capabilities. We won't cover them all but instead we will focus on some of the most important aspects of Numpy: vectors,arrays,matrices, and number generation. Let's start by discussing arrays.

# Numpy Arrays

NumPy arrays are the main way we will use Numpy throughout the course. Numpy arrays essentially come in two flavors: vectors and matrices. Vectors are strictly 1-d arrays and matrices are 2-d (but you should note a matrix can still have only one row or one column)
#Note : We can create more dimensions matrices but are generally not utilized for more than 2 d matrices.

When 1 d arrays are subtracted from 2d arrays it automatically copies the 1 d elements wrt 2d arrays (ie copies along the row)

Let's begin our introduction by exploring how to create NumPy arrays.

## Creating NumPy Arrays

### From a Python List

We can create an array by directly converting a list or list of lists:

my_list = [1,2,3]
my_list

np.array(my_list)

Note : 2 numpy objects of similar dimention only can be added or multiplied

my_matrix = [[1,2,3],[4,5,6],[7,8,9]]
my_matrix

np.array(my_matrix)

## Built-in Methods

There are lots of built-in ways to generate Arrays

### arange

Return evenly spaced values within a given interval.

np.arange(0,10)

np.arange(0,11,2)
### NOTE: append elements in a numpy
np.append(arr,3)        ##will add 3 in the end of the array arr

### zeros and ones

Generate arrays of zeros or ones

np.zeros(3)

np.zeros((5,5))

np.ones(3)

np.ones((3,3))

### linspace
Return evenly spaced numbers over a specified interval.

np.linspace(0,10,3)

np.linspace(0,10,50)

## eye

Creates an identity matrix

np.eye(4)

## Random 

Numpy also has lots of ways to create random number arrays:

### rand
Create an array of the given shape and populate it with
random samples from a uniform distribution
over ``[0, 1)``.

np.random.rand(2)

np.random.rand(5,5)

### randn

Return a sample (or samples) from the "standard normal" distribution. Unlike rand which is uniform:

np.random.randn(2)

np.random.randn(5,5)

### randint
Return random integers from `low` (inclusive) to `high` (exclusive).

np.random.randint(1,100)

np.random.randint(1,100,10)

## Reshape
Returns an array containing the same data with a new shape.

arr.reshape(5,5)

### max,min,argmax,argmin

These are useful methods for finding max or min values. Or to find their index locations using argmin or argmax

ranarr

ranarr.max()

ranarr.argmax()

ranarr.min()

ranarr.argmin()

## Shape    ##Gives the dimensions of the matrix in a tuple format

Shape is an attribute that arrays have (not a method):

# Vector
arr.shape

# Notice the two sets of brackets
arr.reshape(1,25)

arr.reshape(1,25).shape

arr.reshape(25,1)

arr.reshape(25,1).shape

### dtype

You can also grab the data type of the object in the array:

arr.dtype


# NumPy Indexing and Selection


import numpy as np

#Creating sample array
arr = np.arange(0,11)

#Show
arr

## Bracket Indexing and Selection
The simplest way to pick one or some elements of an array looks very similar to python lists:

#Get a value at an index
arr[8]

#Get values in a range
arr[1:5]

#Get values in a range
arr[0:5]

## Broadcasting

Numpy arrays differ from a normal Python list because of their ability to broadcast:

#Setting a value with index range (Broadcasting)
arr[0:5]=100

#Show
arr

# Reset array, we'll see why I had to reset in  a moment
arr = np.arange(0,11)

#Important notes on Slices
slice_of_arr = arr[0:6]

#Show slice
slice_of_arr

#Change Slice
slice_of_arr[:]=99                                           #Everything element of slice_of_arr will become 99

Now note the changes also occur in our original array!

arr

# Data is not copied, it's a view of the original array! This avoids memory problems! #so we need to use .copy() to allocate a different memory

#To get a copy, need to be explicit
arr_copy = arr.copy()

arr_copy

## Indexing a 2D array (matrices)

The general format is **arr_2d[row][col]** or **arr_2d[row,col]**. I recommend usually using the comma notation for clarity.

arr_2d = np.array(([5,10,15],[20,25,30],[35,40,45]))

#Show
arr_2d

#Indexing row
arr_2d[1]


# Format is arr_2d[row][col] or arr_2d[row,col]

# Getting individual element value
arr_2d[1][0]

# Getting individual element value
arr_2d[1,0]

# 2D array slicing

#Shape (2,2) from top right corner
arr_2d[:2,1:]

#Shape bottom row
arr_2d[2]

#Shape bottom row
arr_2d[2,:]

### Fancy Indexing

Fancy indexing allows you to select entire rows or columns out of order,to show this, let's quickly build out a numpy array:

#Set up matrix
arr2d = np.zeros((10,10))

#Length of array
arr_length = arr2d.shape[1]

#For assigning null
d= np.nan

#matrix multiplaction
np.dot(A,B)

#ELEMENT WISE multiplication
A*B               # for A*B A and B matrix should be of same dimension then only elementwise multiplication will be done

#Note: Transpose of an 1D array is same as the array itself ..rows or columns concept dont work in 1 d arrays


#saving a numpy array
arr = np.array(range(5))
outfile = "my_arr.npy"
np.save(outfile,arr=arr)


#Load arrays from npy file
loaded_Arr = np.load(file=outfile)




